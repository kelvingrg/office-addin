{"version":3,"file":"commands.js","mappings":";YACA,IAAIA,EAAsB,CAAC,kQCA3B,ijNCDAA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GDSxBC,OAAOC,SAAQ,WACb,KAsNuB,oBAATC,KACVA,KACkB,oBAAXH,OACPA,YACkB,IAAXI,EAAAA,EACPA,EAAAA,OACAC,GAMJC,OA3NF,SAAgBC,GACd,IAAMC,EAAU,CACdC,KAAMR,OAAOS,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdb,OAAOc,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUX,GAGxED,EAAMa,WACR,EA+MAnB,OAAOoB,QAAQC,UAAU,cApCzB,WACEC,QAAQC,IAAI,oCACZ,IAAIC,EAAO,CACT,CAAC,QAAS,GAAI,UACd,CAAC,OAAQ,MAAO,UAChB,CAAC,MAAO,GAAI,QACZ,CAAC,MAAO,GAAI,QACZ,CAAC,UAAW,GAAI,SAIlBC,MAAMC,KAAI,SAAUZ,GAClB,IAAIa,EAAQb,EAAQc,SAASC,WAAWC,qBACpCC,EAAQJ,EAAMK,SAAS,SAI3B,OAHAD,EAAME,OAAST,EACfO,EAAMG,OAAOC,iBACbR,EAAMS,OAAOC,IAAIN,GAAO,GACjBjB,EAAQwB,MACjB,IAAGC,OAAM,SAAUC,GACjBlB,QAAQC,IAAIiB,EACd,GACF,IAgBAxC,OAAOoB,QAAQC,UAAU,aA1MzB,WACEC,QAAQC,IAAI,yCACZE,MAAMC,IAAG,eArCX,EAqCW,GArCX,EAqCW,UAAC,WAAgBZ,GAAO,2EAQ/B,OANIa,EAAQb,EAAQc,SAASC,WAAWC,sBAGpCC,EAAQJ,EAAMc,gBACZC,KAAK,UAEX,SACM5B,EAAQwB,OAAM,OAEhBd,EAAOO,EAAME,OAEjBX,QAAQC,IAAIC,GAAM,0CAlDtB,+KAmDG,mDAdQ,IAcNe,OAAM,SAAUC,GACjBlB,QAAQC,IAAI,UAAYiB,EAC1B,GAiJF","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/commands/commands.js","webpack://excel-custom-functions-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* eslint-disable no-undef */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\n/**\n * Writes the event source id to the document when ExecuteFunction runs.\n * @param event {Office.AddinCommands.Event}\n */\nfunction readValue() {\n  console.log(\"reached insode write table read data \");\n  Excel.run(async function (context) {\n    // Get the active worksheet\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Load all the used range of the worksheet\n    var range = sheet.getUsedRange();\n    range.load(\"values\");\n\n    // Synchronize the document state by executing the queued commands\n    await context.sync();\n    // Access the data in the range\n    var data = range.values;\n    // Do something with the data...\n    console.log(data);\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n\n  // Excel.run(async function (context) {\n  //   // Get the active worksheet\n  //   var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n  //   // Load the tables collection\n  //   var tables = sheet.tables.load(\"items/name\");\n\n  //   // Synchronize the document state by executing the queued commands\n  //   await context.sync();\n  //   // Loop through each table in the worksheet\n  //   tables.items.forEach(async function (table) {\n  //     // Load the table's properties and dataBodyRange of columns\n  //     await table.load(\n  //       \"name, showHeaders, showTotals, style, columns/items/name, columns/items/dataBodyRange/format, columns/items/dataBodyRange/rowCount, columns/items/dataBodyRange/columnCount, columns/items/dataBodyRange/values, values\"\n  //     );\n\n  //     // Synchronize the document state by executing the queued commands\n  //     return context.sync().then(async function () {\n  //       // Access the data and formatting of the table\n  //       var tableName = table.name;\n  //       var hasHeaders = table.showHeaders;\n  //       var hasTotals = table.showTotals;\n  //       var style = table.style;\n\n  //       var columns = table.columns.items;\n  //       var columnData = [];\n  //       for (var i = 0; i < columns.length; i++) {\n  //         var column = columns[i];\n  //         console.log(column);\n  //         var columnName = column.name;\n  //         var dataBodyRange = column.dataBodyRange;\n  //         var dataBodyValues = dataBodyRange?.values;\n  //         var rowCount = dataBodyRange?.rowCount;\n  //         var columnCount = dataBodyRange?.columnCount;\n  //         var dataBodyFormat = dataBodyRange?.format;\n  //         columnData.push({\n  //           name: columnName,\n  //           data: dataBodyValues,\n  //           rowCount: rowCount,\n  //           columnCount: columnCount,\n  //           format: dataBodyFormat,\n  //         });\n  //       }\n\n  //       // Do something with the table data and formatting...\n  //       console.log(\"Table Name: \" + tableName);\n  //       console.log(\"Has Headers: \" + hasHeaders);\n  //       console.log(\"Has Totals: \" + hasTotals);\n  //       console.log(\"Style: \" + style);\n  //       console.log(\"Column Data: \" + JSON.stringify(columnData));\n  //     });\n  //   });\n  // }).catch(function (error) {\n  //   console.log(\"Error: \" + error);\n  // });\n  //\n  //\n  //\n  //\n  // Excel.run(function (context) {\n  //   // Get the current worksheet\n  //   var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n  //   // Get all the tables in the worksheet\n  //   var tables = sheet.tables;\n\n  //   // Load the table data\n  //   tables.load(\"items/name, columns/items/name, rows/items\");\n\n  //   // Execute the request\n  //   return context.sync().then(function () {\n  //     // Loop through each table and display its data\n  //     tables.items.forEach(function (table) {\n  //       console.log(\"Table name: \" + table.name);\n\n  //       // Loop through each row in the table\n  //       table.rows.items.forEach(function (row) {\n  //         // Loop through each column in the row\n  //         table.columns.items.forEach(function (column) {\n  //           var cell = row.getCell(column.name);\n  //           console.log(column.name + \": \" + cell.values[0][0]);\n  //         });\n  //       });\n  //     });\n  //   });\n  // }).catch(function (error) {\n  //   console.log(\"Error: \" + error);\n  // });\n\n  //   Excel.run(function (context) {\n  //     // Get the current worksheet\n  //     console.log(\"reached insode read table data \");\n  //     var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n  //     // Get the first table in the worksheet\n  //     var table = sheet.tables.getItemAt(0);\n\n  //     // Load the table data and column properties\n  //     table.load(\"name, columns/items/name, columns/items/count, columns/items/items\");\n  //     console.log(table.columns.items, \" table.columns.items.\");\n  //     // Execute the request\n  //     return context.sync().then(function () {\n  //       // Loop through each column in the table\n  //       table.columns.items.forEach(function (column) {\n  //         console.log(\"Column name: \" + column.name);\n  //         console.log(\"Number of cells in the column: \" + column.count);\n\n  //         // Loop through each cell in the column\n  //         column.items.forEach(function (cell) {\n  //           // Check if the cell is part of a merged range\n  //           if (cell.isMerged) {\n  //             var mergedRange = cell.getBoundingRect();\n  //             console.log(\"This cell is part of a merged range: \" + mergedRange.address);\n  //           }\n  //         });\n  //       });\n  //     });\n  //   }).catch(function (error) {\n  //     console.log(\"Error: \" + error);\n  //   });\n\n  //   Excel.run(async function (context) {\n  //     // Get the current worksheet\n  //     var sheet = context.workbook.worksheets.getActiveWorksheet();\n\n  //     // Get the used range of the worksheet\n  //     var range = sheet.getUsedRange();\n  //     range.load(\"values\");\n\n  //     // Execute the request\n  //     await context.sync();\n  //     // Loop through each row in the range\n  //     for (var i = 0; i < range.values.length; i++) {\n  //       var row = range.values[i];\n  //       // Loop through each cell in the row\n  //       for (var j = 0; j < row.length; j++) {\n  //         var cellValue = row[j];\n  //         console.log(cellValue);\n  //       }\n  //     }\n  //   }).catch(function (error) {\n  //     console.log(\"Error: \" + error);\n  //   });\n}\n\nfunction writeValue() {\n  console.log(\"reached insode write table value\");\n  var data = [\n    [\"Alice\", 25, \"Female\"],\n    [\"Name\", \"Age\", \"Gender\"],\n    [\"Bob\", 30, \"Male\"],\n    [\"Bob\", 30, \"Male\"],\n    [\"Charlie\", 40, \"Male\"],\n  ];\n\n  // eslint-disable-next-line no-undef\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    var range = sheet.getRange(\"A1:C5\");\n    range.values = data;\n    range.format.autofitColumns();\n    sheet.tables.add(range, true);\n    return context.sync();\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal();\n\n// the add-in command functions need to be available in global scope\ng.action = action;\nOffice.actions.associate(\"writeValue\", writeValue);\nOffice.actions.associate(\"readValue\", readValue);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","Office","onReady","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","notificationMessages","replaceAsync","completed","actions","associate","console","log","data","Excel","run","sheet","workbook","worksheets","getActiveWorksheet","range","getRange","values","format","autofitColumns","tables","add","sync","catch","error","getUsedRange","load"],"sourceRoot":""}